import dotenv from 'dotenv';
import { Bot } from 'grammy';

import { start } from './components/start.js';
import { createTransferRequest } from './components/create-transfer-request.js';
import { showTransferRequests } from './components/show-transfer-requests.js';
import { menu } from './components/menu.js';

dotenv.config();

const bot = new Bot(process.env.BOT_TOKEN);

start(bot);

createTransferRequest(bot);
showTransferRequests(bot);

menu(bot);

// –°—Ç–∞—Ä—Ç –±–æ—Ç–∞ –∏ –≤—ã–±–æ—Ä —Ä–æ–ª–∏
// bot.start(async (ctx) => {
//     const userId = ctx.from.id;
//     const userRef = doc(db, 'users', String(userId));
//     const userDoc = await getDoc(userRef);

//     if (!userDoc.exists()) {
//         await setDoc(userRef, {
//             id: userId,
//             role: 'passenger',
//             contact: ctx.from.username || ctx.from.first_name
//         });
//     }

//     ctx.reply('–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –í—ã–±–µ—Ä–∏—Ç–µ —Ä–æ–ª—å:', {
//         reply_markup: {
//             inline_keyboard: [
//                 [{ text: 'üë§ –ü–∞—Å—Å–∞–∂–∏—Ä', callback_data: 'role_passenger' }],
//                 [{ text: 'üöó –í–æ–¥–∏—Ç–µ–ª—å', callback_data: 'role_driver' }]
//             ]
//         }
//     });
// });

// –°–º–µ–Ω–∞ —Ä–æ–ª–∏
// bot.action(/role_(.+)/, async (ctx) => {
//     const role = ctx.match[1];
//     const userId = ctx.from.id;
//     const userRef = doc(db, 'users', String(userId));

//     await updateDoc(userRef, { role });
//     ctx.reply(`–í–∞—à–∞ —Ä–æ–ª—å –∏–∑–º–µ–Ω–µ–Ω–∞ –Ω–∞: ${role === 'passenger' ? 'üë§ –ü–∞—Å—Å–∞–∂–∏—Ä' : 'üöó –í–æ–¥–∏—Ç–µ–ª—å'}`);
// });

// –°–æ–∑–¥–∞–Ω–∏–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è
// bot.command('create_ad', async (ctx) => {
//     ctx.reply(`–í–≤–µ–¥–∏—Ç–µ –º–∞—Ä—à—Ä—É—Ç, —Ü–µ–Ω—É –∏ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n–ì–æ—Ä–æ–¥ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è - –ì–æ—Ä–æ–¥ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è, –¶–µ–Ω–∞, –í—Ä–µ–º—è`);

//     bot.on('text', async (ctx) => {
//         const text = ctx.message.text;
//         const [route, price, time] = text.split(',').map(item => item.trim());

//         if (!route || !price || !time) {
//             return ctx.reply('–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.');
//         }

//         const userId = ctx.from.id;
//         const userRef = doc(db, 'users', String(userId));
//         const userDoc = await getDoc(userRef);

//         if (!userDoc.exists()) {
//             return ctx.reply('–°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ —Ä–æ–ª—å –∫–æ–º–∞–Ω–¥–æ–π /start');
//         }

//         await addDoc(collection(db, 'announcements'), {
//             userId,
//             role: userDoc.data().role,
//             route,
//             price,
//             time,
//             status: 'waiting'
//         });

//         ctx.reply('–í–∞—à–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–æ!');
//     });
// });

// –ü—Ä–æ—Å–º–æ—Ç—Ä –æ–±—ä—è–≤–ª–µ–Ω–∏–π
// bot.command('list_ads', async (ctx) => {
//     const snapshot = await getDocs(collection(db, 'announcements'));

//     if (snapshot.empty) {
//         return ctx.reply('–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –æ–±—ä—è–≤–ª–µ–Ω–∏–π.');
//     }

//     let adsList = '–î–æ—Å—Ç—É–ø–Ω—ã–µ –ø–æ–µ–∑–¥–∫–∏:\n';
//     snapshot.forEach(doc => {
//         const ad = doc.data();
//         adsList += `üîπ ${ad.route} | ${ad.price} | ${ad.time} | ${ad.role === 'driver' ? 'üöó –í–æ–¥–∏—Ç–µ–ª—å' : 'üë§ –ü–∞—Å—Å–∞–∂–∏—Ä'}\n`;
//     });

//     ctx.reply(adsList);
// });

// –ü–æ–∏—Å–∫ –ø–æ–µ–∑–¥–∫–∏
// bot.command('search_ad', async (ctx) => {
//     const queryText = ctx.message.text.split(' ').slice(1).join(' ');
//     if (!queryText) {
//         return ctx.reply('–í–≤–µ–¥–∏—Ç–µ –º–∞—Ä—à—Ä—É—Ç –¥–ª—è –ø–æ–∏—Å–∫–∞.');
//     }

//     const q = query(collection(db, 'announcements'), where('route', '==', queryText));
//     const snapshot = await getDocs(q);

//     if (snapshot.empty) {
//         return ctx.reply('–ü–æ —ç—Ç–æ–º—É –º–∞—Ä—à—Ä—É—Ç—É –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.');
//     }

//     let results = '–ù–∞–π–¥–µ–Ω–Ω—ã–µ –ø–æ–µ–∑–¥–∫–∏:\n';
//     snapshot.forEach(doc => {
//         const ad = doc.data();
//         results += `üîπ ${ad.route} | ${ad.price} | ${ad.time} | ${ad.role === 'driver' ? 'üöó –í–æ–¥–∏—Ç–µ–ª—å' : 'üë§ –ü–∞—Å—Å–∞–∂–∏—Ä'}\n`;
//     });

//     ctx.reply(results);
// });

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞
// bot.command('update_status', async (ctx) => {
//     const [orderId, status] = ctx.message.text.split(' ').slice(1);

//     if (!orderId || !['waiting', 'in_progress', 'completed', 'cancelled'].includes(status)) {
//         return ctx.reply('–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /update_status <id_–ø–æ–µ–∑–¥–∫–∏> <waiting|in_progress|completed|cancelled>');
//     }

//     const orderRef = doc(db, 'announcements', orderId);
//     await updateDoc(orderRef, { status });

//     ctx.reply(`–°—Ç–∞—Ç—É—Å –ø–æ–µ–∑–¥–∫–∏ ${orderId} –æ–±–Ω–æ–≤–ª–µ–Ω –Ω–∞ ${status}`);
// });

bot.start();
